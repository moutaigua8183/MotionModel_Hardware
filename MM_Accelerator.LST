C51 COMPILER V9.00   MM_ACCELERATOR                                                        06/18/2014 15:35:05 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MM_ACCELERATOR
OBJECT MODULE PLACED IN MM_Accelerator.OBJ
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE MM_Accelerator.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <MM_Accelerator.h>
   2          #include <reg52.h>
   3          #include "intrins.h"
   4          
   5          #define SlaveAddress   0xA6             //定义器件在IIC总线中的从地址,根据ALT  ADDRESS地址引脚不同修改
   6                                          //ALT  ADDRESS引脚接地时地址为0xA6，接电源时地址为0x3A
   7          sbit SCL=P1^0;                                  //I2C时钟引脚定义
   8          sbit SDA=P1^1;                                  //I2C数据引脚定义
   9          int OFFSETX = 15;
  10          int OFFSETY = -5;
  11          int OFFSETZ = 5;
  12          
  13          
  14          
  15          /***********延迟k毫秒****************/
  16          void delay(unsigned int k)      
  17          {                                               
  18   1              unsigned int idata i,j;                         
  19   1              for(i=0;i<k;i++)
  20   1              {                       
  21   2                      for(j=0;j<112;j++);
  22   2              }                                               
  23   1      }
  24                                          
  25          
  26          /*************起始信号***************/
  27          void ADXL345_Start()
  28          {
  29   1          SDA = 1;                    //拉高数据线
  30   1          SCL = 1;                    //拉高时钟线
  31   1          SDA = 0;                    //产生下降沿
  32   1          SCL = 0;                    //拉低时钟线
  33   1      }
  34          
  35          /*************停止信号***************/
  36          void ADXL345_Stop()
  37          {
  38   1          SDA = 0;                    //拉低数据线
  39   1          SCL = 1;                    //拉高时钟线
  40   1          SDA = 1;                    //产生上升沿
  41   1      }
  42          
  43          /****发送应答信号ack (0:ACK 1:NAK)****/
  44          void ADXL345_SendACK(bit ack)
  45          {
  46   1          SDA = ack;                  //写应答信号
  47   1          SCL = 1;                    //拉高时钟线
  48   1          SCL = 0;                    //拉低时钟线
  49   1      }
  50          
  51          /***********接收应答信号*************/
  52          bit ADXL345_RecvACK()
  53          {
  54   1          SCL = 1;                    //拉高时钟线
  55   1          CY = SDA;                   //读应答信号
C51 COMPILER V9.00   MM_ACCELERATOR                                                        06/18/2014 15:35:05 PAGE 2   

  56   1          SCL = 0;                    //拉低时钟线
  57   1      
  58   1          return CY;
  59   1      }
  60          
  61          /*****向I2C总线发送一个字节数据*****/
  62          void ADXL345_SendByte(char dat)
  63          {
  64   1          unsigned int idata i;
  65   1          for (i=0; i<8; i++)         //8位计数器
  66   1          {
  67   2              dat <<= 1;              //移出数据的最高位
  68   2              SDA = CY;               //送数据口
  69   2              SCL = 1;                //拉高时钟线
  70   2              SCL = 0;                //拉低时钟线
  71   2          }
  72   1          ADXL345_RecvACK();
  73   1      }
  74          
  75          /*****从I2C总线接收一个字节数据*****/
  76          char ADXL345_RecvByte()
  77          {
  78   1          unsigned int idata i;
  79   1          char dat = 0;
  80   1      
  81   1          SDA = 1;                    //使能内部上拉,准备读取数据,
  82   1          for (i=0; i<8; i++)         //8位计数器
  83   1          {
  84   2              dat <<= 1;
  85   2              SCL = 1;                //拉高时钟线
  86   2              dat |= SDA;             //读数据               
  87   2              SCL = 0;                //拉低时钟线
  88   2          }
  89   1          return dat;
  90   1      }
  91          
  92          /***********向ADXL345输入内容*************/
  93          void Write2ADXL345(unsigned char REG_Address,unsigned char REG_data)
  94          {
  95   1          ADXL345_Start();                  //起始信号
  96   1          ADXL345_SendByte(SlaveAddress);   //发送设备地址+写信号
  97   1          ADXL345_SendByte(REG_Address);    //内部寄存器地址
  98   1          ADXL345_SendByte(REG_data);       //内部寄存器数据
  99   1          ADXL345_Stop();                   //发送停止信号
 100   1      }
 101          
 102          /************从ADXL345输出数据**************/
 103          unsigned char ReadADXL345(unsigned char REG_Address)
 104          {  
 105   1              unsigned char REG_data;
 106   1      
 107   1          ADXL345_Start();                          //起始信号
 108   1          ADXL345_SendByte(SlaveAddress);           //发送设备地址+写信号
 109   1          ADXL345_SendByte(REG_Address);            //发送存储单元地址，从0开始       
 110   1          ADXL345_Start();                          //起始信号
 111   1          ADXL345_SendByte(SlaveAddress+1);         //发送设备地址+读信号
 112   1          REG_data=ADXL345_RecvByte();              //读出寄存器数据
 113   1              ADXL345_SendACK(1);   
 114   1              ADXL345_Stop();                           //停止信号
 115   1          return REG_data; 
 116   1      }
 117          
C51 COMPILER V9.00   MM_ACCELERATOR                                                        06/18/2014 15:35:05 PAGE 3   

 118          /***********初始化ADXL345****************/
 119          void Init_ADXL345()
 120          {  
 121   1         Write2ADXL345(0x1E,0x00);   //X轴偏移量清零
 122   1         Write2ADXL345(0x1F,0x00);   //Y轴偏移量清零
 123   1         Write2ADXL345(0x20,0x00);   //Z轴偏移量清零
 124   1         //Write2ADXL345(0x24,0x64);   //Z轴活动中断触发幅度100
 125   1         //Write2ADXL345(0x25,0x2D);   //静止中断触发幅度45
 126   1         //Write2ADXL345(0x27,0x9A);   //使能Z轴活动中断和xy轴静止中断都由幅度触发
 127   1         Write2ADXL345(0x2C,0x09);   //速率设定为50Hz 参考pdf13页        [100Hz is 0x0a]       [50Hz is 0x09]
 128   1         Write2ADXL345(0x2D,0x08);   //选择电源模式   参考pdf24页
 129   1         Write2ADXL345(0x2E,0x80);   //使能 DATA_READY中断、           不开 Activity中断和Inactivity中断
 130   1         //Write2ADXL345(0x2F,0x08);   //活动中断（摔倒）到INT1引脚，静止中断（站立）到INT2引脚
 131   1         //Write2ADXL345(0x30,0x18);   //设置Activity和Inactivity有中断事件
 132   1         Write2ADXL345(0x31,0x2B);   //外部中断：低电平有效。测量范围：正负16g，13位模式
 133   1      }
 134          
 135          /***********************数据接收****************************/
 136          void GetAll(int* x_axis, int* y_axis, int* z_axis)
 137          {
 138   1              unsigned char idata Low,High;           //显示变量
 139   1              int  int_data;                                                   //变量
 140   1              //Data_X
 141   1          Low = ReadADXL345(0x32);
 142   1              High = ReadADXL345(0x33);
 143   1              int_data=High;
 144   1              int_data=(int_data<<8)|Low;    //合成数据   
 145   1              *x_axis=int_data + OFFSETX;
 146   1              //Data_Y
 147   1          Low = ReadADXL345(0x34);
 148   1              High = ReadADXL345(0x35);
 149   1              int_data=(High<<8)|Low;    //合成数据   
 150   1              *y_axis=int_data + OFFSETY;
 151   1              //Data_Z
 152   1          Low = ReadADXL345(0x36);
 153   1              High = ReadADXL345(0x37);
 154   1              int_data=(High<<8)|Low;         //合成数据
 155   1              *z_axis=int_data + OFFSETZ;   
 156   1      }
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    398    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----      10
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
